/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createWorkingDay } from '../fn/working-days-controller/create-working-day';
import { CreateWorkingDay$Params } from '../fn/working-days-controller/create-working-day';
import { deleteWorkingDay } from '../fn/working-days-controller/delete-working-day';
import { DeleteWorkingDay$Params } from '../fn/working-days-controller/delete-working-day';
import { getAllActivityReports } from '../fn/working-days-controller/get-all-activity-reports';
import { GetAllActivityReports$Params } from '../fn/working-days-controller/get-all-activity-reports';
import { getEmployeesWithWorkingDays } from '../fn/working-days-controller/get-employees-with-working-days';
import { GetEmployeesWithWorkingDays$Params } from '../fn/working-days-controller/get-employees-with-working-days';
import { getTodayActivityReport } from '../fn/working-days-controller/get-today-activity-report';
import { GetTodayActivityReport$Params } from '../fn/working-days-controller/get-today-activity-report';
import { modifyWorkingDay } from '../fn/working-days-controller/modify-working-day';
import { ModifyWorkingDay$Params } from '../fn/working-days-controller/modify-working-day';
import { UserWithWorkingDaysDetailsDto } from '../models/user-with-working-days-details-dto';
import { WorkingDaysDto } from '../models/working-days-dto';

@Injectable({ providedIn: 'root' })
export class WorkingDaysControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `modifyWorkingDay()` */
  static readonly ModifyWorkingDayPath = '/working-days/modify';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `modifyWorkingDay()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  modifyWorkingDay$Response(params: ModifyWorkingDay$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return modifyWorkingDay(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `modifyWorkingDay$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  modifyWorkingDay(params: ModifyWorkingDay$Params, context?: HttpContext): Observable<{
}> {
    return this.modifyWorkingDay$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteWorkingDay()` */
  static readonly DeleteWorkingDayPath = '/working-days/delete/{requestId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteWorkingDay()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteWorkingDay$Response(params: DeleteWorkingDay$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteWorkingDay(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteWorkingDay$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteWorkingDay(params: DeleteWorkingDay$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteWorkingDay$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `createWorkingDay()` */
  static readonly CreateWorkingDayPath = '/working-days/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createWorkingDay()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createWorkingDay$Response(params: CreateWorkingDay$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return createWorkingDay(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createWorkingDay$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createWorkingDay(params: CreateWorkingDay$Params, context?: HttpContext): Observable<{
}> {
    return this.createWorkingDay$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getTodayActivityReport()` */
  static readonly GetTodayActivityReportPath = '/working-days/today';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTodayActivityReport()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTodayActivityReport$Response(params?: GetTodayActivityReport$Params, context?: HttpContext): Observable<StrictHttpResponse<WorkingDaysDto>> {
    return getTodayActivityReport(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTodayActivityReport$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTodayActivityReport(params?: GetTodayActivityReport$Params, context?: HttpContext): Observable<WorkingDaysDto> {
    return this.getTodayActivityReport$Response(params, context).pipe(
      map((r: StrictHttpResponse<WorkingDaysDto>): WorkingDaysDto => r.body)
    );
  }

  /** Path part for operation `getEmployeesWithWorkingDays()` */
  static readonly GetEmployeesWithWorkingDaysPath = '/working-days/get-employees-with-working-days';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEmployeesWithWorkingDays()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmployeesWithWorkingDays$Response(params?: GetEmployeesWithWorkingDays$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserWithWorkingDaysDetailsDto>>> {
    return getEmployeesWithWorkingDays(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEmployeesWithWorkingDays$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmployeesWithWorkingDays(params?: GetEmployeesWithWorkingDays$Params, context?: HttpContext): Observable<Array<UserWithWorkingDaysDetailsDto>> {
    return this.getEmployeesWithWorkingDays$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserWithWorkingDaysDetailsDto>>): Array<UserWithWorkingDaysDetailsDto> => r.body)
    );
  }

  /** Path part for operation `getAllActivityReports()` */
  static readonly GetAllActivityReportsPath = '/working-days/get-all-working-days-by-employee';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllActivityReports()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllActivityReports$Response(params?: GetAllActivityReports$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<WorkingDaysDto>>> {
    return getAllActivityReports(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllActivityReports$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllActivityReports(params?: GetAllActivityReports$Params, context?: HttpContext): Observable<Array<WorkingDaysDto>> {
    return this.getAllActivityReports$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<WorkingDaysDto>>): Array<WorkingDaysDto> => r.body)
    );
  }

}
