/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { activateUser } from '../fn/user-crud-controller/activate-user';
import { ActivateUser$Params } from '../fn/user-crud-controller/activate-user';
import { authenticatedUser } from '../fn/user-crud-controller/authenticated-user';
import { AuthenticatedUser$Params } from '../fn/user-crud-controller/authenticated-user';
import { deactivateUser } from '../fn/user-crud-controller/deactivate-user';
import { DeactivateUser$Params } from '../fn/user-crud-controller/deactivate-user';
import { getAllEmployees } from '../fn/user-crud-controller/get-all-employees';
import { GetAllEmployees$Params } from '../fn/user-crud-controller/get-all-employees';
import { modifyUser } from '../fn/user-crud-controller/modify-user';
import { ModifyUser$Params } from '../fn/user-crud-controller/modify-user';
import { register } from '../fn/user-crud-controller/register';
import { Register$Params } from '../fn/user-crud-controller/register';
import { UserDetailsDto } from '../models/user-details-dto';
import { UserWithCompanyDto } from '../models/user-with-company-dto';

@Injectable({ providedIn: 'root' })
export class UserCrudControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `register()` */
  static readonly RegisterPath = '/users/register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `register()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  register$Response(params: Register$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return register(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `register$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  register(params: Register$Params, context?: HttpContext): Observable<{
}> {
    return this.register$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `modifyUser()` */
  static readonly ModifyUserPath = '/users/modify';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `modifyUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  modifyUser$Response(params: ModifyUser$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return modifyUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `modifyUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  modifyUser(params: ModifyUser$Params, context?: HttpContext): Observable<{
}> {
    return this.modifyUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deactivateUser()` */
  static readonly DeactivateUserPath = '/users/deactivate/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deactivateUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  deactivateUser$Response(params: DeactivateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deactivateUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deactivateUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deactivateUser(params: DeactivateUser$Params, context?: HttpContext): Observable<{
}> {
    return this.deactivateUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `activateUser()` */
  static readonly ActivateUserPath = '/users/activate/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `activateUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  activateUser$Response(params: ActivateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return activateUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `activateUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  activateUser(params: ActivateUser$Params, context?: HttpContext): Observable<{
}> {
    return this.activateUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `authenticatedUser()` */
  static readonly AuthenticatedUserPath = '/users/me';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authenticatedUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  authenticatedUser$Response(params?: AuthenticatedUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserWithCompanyDto>> {
    return authenticatedUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authenticatedUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authenticatedUser(params?: AuthenticatedUser$Params, context?: HttpContext): Observable<UserWithCompanyDto> {
    return this.authenticatedUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserWithCompanyDto>): UserWithCompanyDto => r.body)
    );
  }

  /** Path part for operation `getAllEmployees()` */
  static readonly GetAllEmployeesPath = '/users/get-employees';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllEmployees()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllEmployees$Response(params?: GetAllEmployees$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDetailsDto>>> {
    return getAllEmployees(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllEmployees$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllEmployees(params?: GetAllEmployees$Params, context?: HttpContext): Observable<Array<UserDetailsDto>> {
    return this.getAllEmployees$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDetailsDto>>): Array<UserDetailsDto> => r.body)
    );
  }

}
